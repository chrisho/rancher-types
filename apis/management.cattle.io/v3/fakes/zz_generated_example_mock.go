// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package fakes

import (
	context "context"
	sync "sync"

	controller "github.com/rancher/norman/controller"
	objectclient "github.com/rancher/norman/objectclient"
	v3 "github.com/rancher/types/apis/management.cattle.io/v3"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

var (
	lockExampleListerMockGet  sync.RWMutex
	lockExampleListerMockList sync.RWMutex
)

// Ensure, that ExampleListerMock does implement ExampleLister.
// If this is not the case, regenerate this file with moq.
var _ v3.ExampleLister = &ExampleListerMock{}

// ExampleListerMock is a mock implementation of ExampleLister.
//
//     func TestSomethingThatUsesExampleLister(t *testing.T) {
//
//         // make and configure a mocked ExampleLister
//         mockedExampleLister := &ExampleListerMock{
//             GetFunc: func(namespace string, name string) (*v3.Example, error) {
// 	               panic("mock out the Get method")
//             },
//             ListFunc: func(namespace string, selector labels.Selector) ([]*v3.Example, error) {
// 	               panic("mock out the List method")
//             },
//         }
//
//         // use mockedExampleLister in code that requires ExampleLister
//         // and then make assertions.
//
//     }
type ExampleListerMock struct {
	// GetFunc mocks the Get method.
	GetFunc func(namespace string, name string) (*v3.Example, error)

	// ListFunc mocks the List method.
	ListFunc func(namespace string, selector labels.Selector) ([]*v3.Example, error)

	// calls tracks calls to the methods.
	calls struct {
		// Get holds details about calls to the Get method.
		Get []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// List holds details about calls to the List method.
		List []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Selector is the selector argument value.
			Selector labels.Selector
		}
	}
}

// Get calls GetFunc.
func (mock *ExampleListerMock) Get(namespace string, name string) (*v3.Example, error) {
	if mock.GetFunc == nil {
		panic("ExampleListerMock.GetFunc: method is nil but ExampleLister.Get was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	lockExampleListerMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockExampleListerMockGet.Unlock()
	return mock.GetFunc(namespace, name)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedExampleLister.GetCalls())
func (mock *ExampleListerMock) GetCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	lockExampleListerMockGet.RLock()
	calls = mock.calls.Get
	lockExampleListerMockGet.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *ExampleListerMock) List(namespace string, selector labels.Selector) ([]*v3.Example, error) {
	if mock.ListFunc == nil {
		panic("ExampleListerMock.ListFunc: method is nil but ExampleLister.List was just called")
	}
	callInfo := struct {
		Namespace string
		Selector  labels.Selector
	}{
		Namespace: namespace,
		Selector:  selector,
	}
	lockExampleListerMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockExampleListerMockList.Unlock()
	return mock.ListFunc(namespace, selector)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedExampleLister.ListCalls())
func (mock *ExampleListerMock) ListCalls() []struct {
	Namespace string
	Selector  labels.Selector
} {
	var calls []struct {
		Namespace string
		Selector  labels.Selector
	}
	lockExampleListerMockList.RLock()
	calls = mock.calls.List
	lockExampleListerMockList.RUnlock()
	return calls
}

var (
	lockExampleControllerMockAddClusterScopedFeatureHandler sync.RWMutex
	lockExampleControllerMockAddClusterScopedHandler        sync.RWMutex
	lockExampleControllerMockAddFeatureHandler              sync.RWMutex
	lockExampleControllerMockAddHandler                     sync.RWMutex
	lockExampleControllerMockEnqueue                        sync.RWMutex
	lockExampleControllerMockGeneric                        sync.RWMutex
	lockExampleControllerMockInformer                       sync.RWMutex
	lockExampleControllerMockLister                         sync.RWMutex
	lockExampleControllerMockStart                          sync.RWMutex
	lockExampleControllerMockSync                           sync.RWMutex
)

// Ensure, that ExampleControllerMock does implement ExampleController.
// If this is not the case, regenerate this file with moq.
var _ v3.ExampleController = &ExampleControllerMock{}

// ExampleControllerMock is a mock implementation of ExampleController.
//
//     func TestSomethingThatUsesExampleController(t *testing.T) {
//
//         // make and configure a mocked ExampleController
//         mockedExampleController := &ExampleControllerMock{
//             AddClusterScopedFeatureHandlerFunc: func(ctx context.Context, enabled func() bool, name string, clusterName string, handler v3.ExampleHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedFeatureHandler method")
//             },
//             AddClusterScopedHandlerFunc: func(ctx context.Context, name string, clusterName string, handler v3.ExampleHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedHandler method")
//             },
//             AddFeatureHandlerFunc: func(ctx context.Context, enabled func() bool, name string, sync v3.ExampleHandlerFunc)  {
// 	               panic("mock out the AddFeatureHandler method")
//             },
//             AddHandlerFunc: func(ctx context.Context, name string, handler v3.ExampleHandlerFunc)  {
// 	               panic("mock out the AddHandler method")
//             },
//             EnqueueFunc: func(namespace string, name string)  {
// 	               panic("mock out the Enqueue method")
//             },
//             GenericFunc: func() controller.GenericController {
// 	               panic("mock out the Generic method")
//             },
//             InformerFunc: func() cache.SharedIndexInformer {
// 	               panic("mock out the Informer method")
//             },
//             ListerFunc: func() v3.ExampleLister {
// 	               panic("mock out the Lister method")
//             },
//             StartFunc: func(ctx context.Context, threadiness int) error {
// 	               panic("mock out the Start method")
//             },
//             SyncFunc: func(ctx context.Context) error {
// 	               panic("mock out the Sync method")
//             },
//         }
//
//         // use mockedExampleController in code that requires ExampleController
//         // and then make assertions.
//
//     }
type ExampleControllerMock struct {
	// AddClusterScopedFeatureHandlerFunc mocks the AddClusterScopedFeatureHandler method.
	AddClusterScopedFeatureHandlerFunc func(ctx context.Context, enabled func() bool, name string, clusterName string, handler v3.ExampleHandlerFunc)

	// AddClusterScopedHandlerFunc mocks the AddClusterScopedHandler method.
	AddClusterScopedHandlerFunc func(ctx context.Context, name string, clusterName string, handler v3.ExampleHandlerFunc)

	// AddFeatureHandlerFunc mocks the AddFeatureHandler method.
	AddFeatureHandlerFunc func(ctx context.Context, enabled func() bool, name string, sync v3.ExampleHandlerFunc)

	// AddHandlerFunc mocks the AddHandler method.
	AddHandlerFunc func(ctx context.Context, name string, handler v3.ExampleHandlerFunc)

	// EnqueueFunc mocks the Enqueue method.
	EnqueueFunc func(namespace string, name string)

	// GenericFunc mocks the Generic method.
	GenericFunc func() controller.GenericController

	// InformerFunc mocks the Informer method.
	InformerFunc func() cache.SharedIndexInformer

	// ListerFunc mocks the Lister method.
	ListerFunc func() v3.ExampleLister

	// StartFunc mocks the Start method.
	StartFunc func(ctx context.Context, threadiness int) error

	// SyncFunc mocks the Sync method.
	SyncFunc func(ctx context.Context) error

	// calls tracks calls to the methods.
	calls struct {
		// AddClusterScopedFeatureHandler holds details about calls to the AddClusterScopedFeatureHandler method.
		AddClusterScopedFeatureHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Handler is the handler argument value.
			Handler v3.ExampleHandlerFunc
		}
		// AddClusterScopedHandler holds details about calls to the AddClusterScopedHandler method.
		AddClusterScopedHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Handler is the handler argument value.
			Handler v3.ExampleHandlerFunc
		}
		// AddFeatureHandler holds details about calls to the AddFeatureHandler method.
		AddFeatureHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v3.ExampleHandlerFunc
		}
		// AddHandler holds details about calls to the AddHandler method.
		AddHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Handler is the handler argument value.
			Handler v3.ExampleHandlerFunc
		}
		// Enqueue holds details about calls to the Enqueue method.
		Enqueue []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// Generic holds details about calls to the Generic method.
		Generic []struct {
		}
		// Informer holds details about calls to the Informer method.
		Informer []struct {
		}
		// Lister holds details about calls to the Lister method.
		Lister []struct {
		}
		// Start holds details about calls to the Start method.
		Start []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Threadiness is the threadiness argument value.
			Threadiness int
		}
		// Sync holds details about calls to the Sync method.
		Sync []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
}

// AddClusterScopedFeatureHandler calls AddClusterScopedFeatureHandlerFunc.
func (mock *ExampleControllerMock) AddClusterScopedFeatureHandler(ctx context.Context, enabled func() bool, name string, clusterName string, handler v3.ExampleHandlerFunc) {
	if mock.AddClusterScopedFeatureHandlerFunc == nil {
		panic("ExampleControllerMock.AddClusterScopedFeatureHandlerFunc: method is nil but ExampleController.AddClusterScopedFeatureHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Enabled     func() bool
		Name        string
		ClusterName string
		Handler     v3.ExampleHandlerFunc
	}{
		Ctx:         ctx,
		Enabled:     enabled,
		Name:        name,
		ClusterName: clusterName,
		Handler:     handler,
	}
	lockExampleControllerMockAddClusterScopedFeatureHandler.Lock()
	mock.calls.AddClusterScopedFeatureHandler = append(mock.calls.AddClusterScopedFeatureHandler, callInfo)
	lockExampleControllerMockAddClusterScopedFeatureHandler.Unlock()
	mock.AddClusterScopedFeatureHandlerFunc(ctx, enabled, name, clusterName, handler)
}

// AddClusterScopedFeatureHandlerCalls gets all the calls that were made to AddClusterScopedFeatureHandler.
// Check the length with:
//     len(mockedExampleController.AddClusterScopedFeatureHandlerCalls())
func (mock *ExampleControllerMock) AddClusterScopedFeatureHandlerCalls() []struct {
	Ctx         context.Context
	Enabled     func() bool
	Name        string
	ClusterName string
	Handler     v3.ExampleHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Enabled     func() bool
		Name        string
		ClusterName string
		Handler     v3.ExampleHandlerFunc
	}
	lockExampleControllerMockAddClusterScopedFeatureHandler.RLock()
	calls = mock.calls.AddClusterScopedFeatureHandler
	lockExampleControllerMockAddClusterScopedFeatureHandler.RUnlock()
	return calls
}

// AddClusterScopedHandler calls AddClusterScopedHandlerFunc.
func (mock *ExampleControllerMock) AddClusterScopedHandler(ctx context.Context, name string, clusterName string, handler v3.ExampleHandlerFunc) {
	if mock.AddClusterScopedHandlerFunc == nil {
		panic("ExampleControllerMock.AddClusterScopedHandlerFunc: method is nil but ExampleController.AddClusterScopedHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Handler     v3.ExampleHandlerFunc
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Handler:     handler,
	}
	lockExampleControllerMockAddClusterScopedHandler.Lock()
	mock.calls.AddClusterScopedHandler = append(mock.calls.AddClusterScopedHandler, callInfo)
	lockExampleControllerMockAddClusterScopedHandler.Unlock()
	mock.AddClusterScopedHandlerFunc(ctx, name, clusterName, handler)
}

// AddClusterScopedHandlerCalls gets all the calls that were made to AddClusterScopedHandler.
// Check the length with:
//     len(mockedExampleController.AddClusterScopedHandlerCalls())
func (mock *ExampleControllerMock) AddClusterScopedHandlerCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Handler     v3.ExampleHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Handler     v3.ExampleHandlerFunc
	}
	lockExampleControllerMockAddClusterScopedHandler.RLock()
	calls = mock.calls.AddClusterScopedHandler
	lockExampleControllerMockAddClusterScopedHandler.RUnlock()
	return calls
}

// AddFeatureHandler calls AddFeatureHandlerFunc.
func (mock *ExampleControllerMock) AddFeatureHandler(ctx context.Context, enabled func() bool, name string, sync v3.ExampleHandlerFunc) {
	if mock.AddFeatureHandlerFunc == nil {
		panic("ExampleControllerMock.AddFeatureHandlerFunc: method is nil but ExampleController.AddFeatureHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Enabled func() bool
		Name    string
		Sync    v3.ExampleHandlerFunc
	}{
		Ctx:     ctx,
		Enabled: enabled,
		Name:    name,
		Sync:    sync,
	}
	lockExampleControllerMockAddFeatureHandler.Lock()
	mock.calls.AddFeatureHandler = append(mock.calls.AddFeatureHandler, callInfo)
	lockExampleControllerMockAddFeatureHandler.Unlock()
	mock.AddFeatureHandlerFunc(ctx, enabled, name, sync)
}

// AddFeatureHandlerCalls gets all the calls that were made to AddFeatureHandler.
// Check the length with:
//     len(mockedExampleController.AddFeatureHandlerCalls())
func (mock *ExampleControllerMock) AddFeatureHandlerCalls() []struct {
	Ctx     context.Context
	Enabled func() bool
	Name    string
	Sync    v3.ExampleHandlerFunc
} {
	var calls []struct {
		Ctx     context.Context
		Enabled func() bool
		Name    string
		Sync    v3.ExampleHandlerFunc
	}
	lockExampleControllerMockAddFeatureHandler.RLock()
	calls = mock.calls.AddFeatureHandler
	lockExampleControllerMockAddFeatureHandler.RUnlock()
	return calls
}

// AddHandler calls AddHandlerFunc.
func (mock *ExampleControllerMock) AddHandler(ctx context.Context, name string, handler v3.ExampleHandlerFunc) {
	if mock.AddHandlerFunc == nil {
		panic("ExampleControllerMock.AddHandlerFunc: method is nil but ExampleController.AddHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Name    string
		Handler v3.ExampleHandlerFunc
	}{
		Ctx:     ctx,
		Name:    name,
		Handler: handler,
	}
	lockExampleControllerMockAddHandler.Lock()
	mock.calls.AddHandler = append(mock.calls.AddHandler, callInfo)
	lockExampleControllerMockAddHandler.Unlock()
	mock.AddHandlerFunc(ctx, name, handler)
}

// AddHandlerCalls gets all the calls that were made to AddHandler.
// Check the length with:
//     len(mockedExampleController.AddHandlerCalls())
func (mock *ExampleControllerMock) AddHandlerCalls() []struct {
	Ctx     context.Context
	Name    string
	Handler v3.ExampleHandlerFunc
} {
	var calls []struct {
		Ctx     context.Context
		Name    string
		Handler v3.ExampleHandlerFunc
	}
	lockExampleControllerMockAddHandler.RLock()
	calls = mock.calls.AddHandler
	lockExampleControllerMockAddHandler.RUnlock()
	return calls
}

// Enqueue calls EnqueueFunc.
func (mock *ExampleControllerMock) Enqueue(namespace string, name string) {
	if mock.EnqueueFunc == nil {
		panic("ExampleControllerMock.EnqueueFunc: method is nil but ExampleController.Enqueue was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	lockExampleControllerMockEnqueue.Lock()
	mock.calls.Enqueue = append(mock.calls.Enqueue, callInfo)
	lockExampleControllerMockEnqueue.Unlock()
	mock.EnqueueFunc(namespace, name)
}

// EnqueueCalls gets all the calls that were made to Enqueue.
// Check the length with:
//     len(mockedExampleController.EnqueueCalls())
func (mock *ExampleControllerMock) EnqueueCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	lockExampleControllerMockEnqueue.RLock()
	calls = mock.calls.Enqueue
	lockExampleControllerMockEnqueue.RUnlock()
	return calls
}

// Generic calls GenericFunc.
func (mock *ExampleControllerMock) Generic() controller.GenericController {
	if mock.GenericFunc == nil {
		panic("ExampleControllerMock.GenericFunc: method is nil but ExampleController.Generic was just called")
	}
	callInfo := struct {
	}{}
	lockExampleControllerMockGeneric.Lock()
	mock.calls.Generic = append(mock.calls.Generic, callInfo)
	lockExampleControllerMockGeneric.Unlock()
	return mock.GenericFunc()
}

// GenericCalls gets all the calls that were made to Generic.
// Check the length with:
//     len(mockedExampleController.GenericCalls())
func (mock *ExampleControllerMock) GenericCalls() []struct {
} {
	var calls []struct {
	}
	lockExampleControllerMockGeneric.RLock()
	calls = mock.calls.Generic
	lockExampleControllerMockGeneric.RUnlock()
	return calls
}

// Informer calls InformerFunc.
func (mock *ExampleControllerMock) Informer() cache.SharedIndexInformer {
	if mock.InformerFunc == nil {
		panic("ExampleControllerMock.InformerFunc: method is nil but ExampleController.Informer was just called")
	}
	callInfo := struct {
	}{}
	lockExampleControllerMockInformer.Lock()
	mock.calls.Informer = append(mock.calls.Informer, callInfo)
	lockExampleControllerMockInformer.Unlock()
	return mock.InformerFunc()
}

// InformerCalls gets all the calls that were made to Informer.
// Check the length with:
//     len(mockedExampleController.InformerCalls())
func (mock *ExampleControllerMock) InformerCalls() []struct {
} {
	var calls []struct {
	}
	lockExampleControllerMockInformer.RLock()
	calls = mock.calls.Informer
	lockExampleControllerMockInformer.RUnlock()
	return calls
}

// Lister calls ListerFunc.
func (mock *ExampleControllerMock) Lister() v3.ExampleLister {
	if mock.ListerFunc == nil {
		panic("ExampleControllerMock.ListerFunc: method is nil but ExampleController.Lister was just called")
	}
	callInfo := struct {
	}{}
	lockExampleControllerMockLister.Lock()
	mock.calls.Lister = append(mock.calls.Lister, callInfo)
	lockExampleControllerMockLister.Unlock()
	return mock.ListerFunc()
}

// ListerCalls gets all the calls that were made to Lister.
// Check the length with:
//     len(mockedExampleController.ListerCalls())
func (mock *ExampleControllerMock) ListerCalls() []struct {
} {
	var calls []struct {
	}
	lockExampleControllerMockLister.RLock()
	calls = mock.calls.Lister
	lockExampleControllerMockLister.RUnlock()
	return calls
}

// Start calls StartFunc.
func (mock *ExampleControllerMock) Start(ctx context.Context, threadiness int) error {
	if mock.StartFunc == nil {
		panic("ExampleControllerMock.StartFunc: method is nil but ExampleController.Start was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Threadiness int
	}{
		Ctx:         ctx,
		Threadiness: threadiness,
	}
	lockExampleControllerMockStart.Lock()
	mock.calls.Start = append(mock.calls.Start, callInfo)
	lockExampleControllerMockStart.Unlock()
	return mock.StartFunc(ctx, threadiness)
}

// StartCalls gets all the calls that were made to Start.
// Check the length with:
//     len(mockedExampleController.StartCalls())
func (mock *ExampleControllerMock) StartCalls() []struct {
	Ctx         context.Context
	Threadiness int
} {
	var calls []struct {
		Ctx         context.Context
		Threadiness int
	}
	lockExampleControllerMockStart.RLock()
	calls = mock.calls.Start
	lockExampleControllerMockStart.RUnlock()
	return calls
}

// Sync calls SyncFunc.
func (mock *ExampleControllerMock) Sync(ctx context.Context) error {
	if mock.SyncFunc == nil {
		panic("ExampleControllerMock.SyncFunc: method is nil but ExampleController.Sync was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	lockExampleControllerMockSync.Lock()
	mock.calls.Sync = append(mock.calls.Sync, callInfo)
	lockExampleControllerMockSync.Unlock()
	return mock.SyncFunc(ctx)
}

// SyncCalls gets all the calls that were made to Sync.
// Check the length with:
//     len(mockedExampleController.SyncCalls())
func (mock *ExampleControllerMock) SyncCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	lockExampleControllerMockSync.RLock()
	calls = mock.calls.Sync
	lockExampleControllerMockSync.RUnlock()
	return calls
}

var (
	lockExampleInterfaceMockAddClusterScopedFeatureHandler   sync.RWMutex
	lockExampleInterfaceMockAddClusterScopedFeatureLifecycle sync.RWMutex
	lockExampleInterfaceMockAddClusterScopedHandler          sync.RWMutex
	lockExampleInterfaceMockAddClusterScopedLifecycle        sync.RWMutex
	lockExampleInterfaceMockAddFeatureHandler                sync.RWMutex
	lockExampleInterfaceMockAddFeatureLifecycle              sync.RWMutex
	lockExampleInterfaceMockAddHandler                       sync.RWMutex
	lockExampleInterfaceMockAddLifecycle                     sync.RWMutex
	lockExampleInterfaceMockController                       sync.RWMutex
	lockExampleInterfaceMockCreate                           sync.RWMutex
	lockExampleInterfaceMockDelete                           sync.RWMutex
	lockExampleInterfaceMockDeleteCollection                 sync.RWMutex
	lockExampleInterfaceMockDeleteNamespaced                 sync.RWMutex
	lockExampleInterfaceMockGet                              sync.RWMutex
	lockExampleInterfaceMockGetNamespaced                    sync.RWMutex
	lockExampleInterfaceMockList                             sync.RWMutex
	lockExampleInterfaceMockObjectClient                     sync.RWMutex
	lockExampleInterfaceMockUpdate                           sync.RWMutex
	lockExampleInterfaceMockWatch                            sync.RWMutex
)

// Ensure, that ExampleInterfaceMock does implement ExampleInterface.
// If this is not the case, regenerate this file with moq.
var _ v3.ExampleInterface = &ExampleInterfaceMock{}

// ExampleInterfaceMock is a mock implementation of ExampleInterface.
//
//     func TestSomethingThatUsesExampleInterface(t *testing.T) {
//
//         // make and configure a mocked ExampleInterface
//         mockedExampleInterface := &ExampleInterfaceMock{
//             AddClusterScopedFeatureHandlerFunc: func(ctx context.Context, enabled func() bool, name string, clusterName string, sync v3.ExampleHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedFeatureHandler method")
//             },
//             AddClusterScopedFeatureLifecycleFunc: func(ctx context.Context, enabled func() bool, name string, clusterName string, lifecycle v3.ExampleLifecycle)  {
// 	               panic("mock out the AddClusterScopedFeatureLifecycle method")
//             },
//             AddClusterScopedHandlerFunc: func(ctx context.Context, name string, clusterName string, sync v3.ExampleHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedHandler method")
//             },
//             AddClusterScopedLifecycleFunc: func(ctx context.Context, name string, clusterName string, lifecycle v3.ExampleLifecycle)  {
// 	               panic("mock out the AddClusterScopedLifecycle method")
//             },
//             AddFeatureHandlerFunc: func(ctx context.Context, enabled func() bool, name string, sync v3.ExampleHandlerFunc)  {
// 	               panic("mock out the AddFeatureHandler method")
//             },
//             AddFeatureLifecycleFunc: func(ctx context.Context, enabled func() bool, name string, lifecycle v3.ExampleLifecycle)  {
// 	               panic("mock out the AddFeatureLifecycle method")
//             },
//             AddHandlerFunc: func(ctx context.Context, name string, sync v3.ExampleHandlerFunc)  {
// 	               panic("mock out the AddHandler method")
//             },
//             AddLifecycleFunc: func(ctx context.Context, name string, lifecycle v3.ExampleLifecycle)  {
// 	               panic("mock out the AddLifecycle method")
//             },
//             ControllerFunc: func() v3.ExampleController {
// 	               panic("mock out the Controller method")
//             },
//             CreateFunc: func(in1 *v3.Example) (*v3.Example, error) {
// 	               panic("mock out the Create method")
//             },
//             DeleteFunc: func(name string, options *v1.DeleteOptions) error {
// 	               panic("mock out the Delete method")
//             },
//             DeleteCollectionFunc: func(deleteOpts *v1.DeleteOptions, listOpts v1.ListOptions) error {
// 	               panic("mock out the DeleteCollection method")
//             },
//             DeleteNamespacedFunc: func(namespace string, name string, options *v1.DeleteOptions) error {
// 	               panic("mock out the DeleteNamespaced method")
//             },
//             GetFunc: func(name string, opts v1.GetOptions) (*v3.Example, error) {
// 	               panic("mock out the Get method")
//             },
//             GetNamespacedFunc: func(namespace string, name string, opts v1.GetOptions) (*v3.Example, error) {
// 	               panic("mock out the GetNamespaced method")
//             },
//             ListFunc: func(opts v1.ListOptions) (*v3.ExampleList, error) {
// 	               panic("mock out the List method")
//             },
//             ObjectClientFunc: func() *objectclient.ObjectClient {
// 	               panic("mock out the ObjectClient method")
//             },
//             UpdateFunc: func(in1 *v3.Example) (*v3.Example, error) {
// 	               panic("mock out the Update method")
//             },
//             WatchFunc: func(opts v1.ListOptions) (watch.Interface, error) {
// 	               panic("mock out the Watch method")
//             },
//         }
//
//         // use mockedExampleInterface in code that requires ExampleInterface
//         // and then make assertions.
//
//     }
type ExampleInterfaceMock struct {
	// AddClusterScopedFeatureHandlerFunc mocks the AddClusterScopedFeatureHandler method.
	AddClusterScopedFeatureHandlerFunc func(ctx context.Context, enabled func() bool, name string, clusterName string, sync v3.ExampleHandlerFunc)

	// AddClusterScopedFeatureLifecycleFunc mocks the AddClusterScopedFeatureLifecycle method.
	AddClusterScopedFeatureLifecycleFunc func(ctx context.Context, enabled func() bool, name string, clusterName string, lifecycle v3.ExampleLifecycle)

	// AddClusterScopedHandlerFunc mocks the AddClusterScopedHandler method.
	AddClusterScopedHandlerFunc func(ctx context.Context, name string, clusterName string, sync v3.ExampleHandlerFunc)

	// AddClusterScopedLifecycleFunc mocks the AddClusterScopedLifecycle method.
	AddClusterScopedLifecycleFunc func(ctx context.Context, name string, clusterName string, lifecycle v3.ExampleLifecycle)

	// AddFeatureHandlerFunc mocks the AddFeatureHandler method.
	AddFeatureHandlerFunc func(ctx context.Context, enabled func() bool, name string, sync v3.ExampleHandlerFunc)

	// AddFeatureLifecycleFunc mocks the AddFeatureLifecycle method.
	AddFeatureLifecycleFunc func(ctx context.Context, enabled func() bool, name string, lifecycle v3.ExampleLifecycle)

	// AddHandlerFunc mocks the AddHandler method.
	AddHandlerFunc func(ctx context.Context, name string, sync v3.ExampleHandlerFunc)

	// AddLifecycleFunc mocks the AddLifecycle method.
	AddLifecycleFunc func(ctx context.Context, name string, lifecycle v3.ExampleLifecycle)

	// ControllerFunc mocks the Controller method.
	ControllerFunc func() v3.ExampleController

	// CreateFunc mocks the Create method.
	CreateFunc func(in1 *v3.Example) (*v3.Example, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(name string, options *v1.DeleteOptions) error

	// DeleteCollectionFunc mocks the DeleteCollection method.
	DeleteCollectionFunc func(deleteOpts *v1.DeleteOptions, listOpts v1.ListOptions) error

	// DeleteNamespacedFunc mocks the DeleteNamespaced method.
	DeleteNamespacedFunc func(namespace string, name string, options *v1.DeleteOptions) error

	// GetFunc mocks the Get method.
	GetFunc func(name string, opts v1.GetOptions) (*v3.Example, error)

	// GetNamespacedFunc mocks the GetNamespaced method.
	GetNamespacedFunc func(namespace string, name string, opts v1.GetOptions) (*v3.Example, error)

	// ListFunc mocks the List method.
	ListFunc func(opts v1.ListOptions) (*v3.ExampleList, error)

	// ObjectClientFunc mocks the ObjectClient method.
	ObjectClientFunc func() *objectclient.ObjectClient

	// UpdateFunc mocks the Update method.
	UpdateFunc func(in1 *v3.Example) (*v3.Example, error)

	// WatchFunc mocks the Watch method.
	WatchFunc func(opts v1.ListOptions) (watch.Interface, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddClusterScopedFeatureHandler holds details about calls to the AddClusterScopedFeatureHandler method.
		AddClusterScopedFeatureHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Sync is the sync argument value.
			Sync v3.ExampleHandlerFunc
		}
		// AddClusterScopedFeatureLifecycle holds details about calls to the AddClusterScopedFeatureLifecycle method.
		AddClusterScopedFeatureLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v3.ExampleLifecycle
		}
		// AddClusterScopedHandler holds details about calls to the AddClusterScopedHandler method.
		AddClusterScopedHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Sync is the sync argument value.
			Sync v3.ExampleHandlerFunc
		}
		// AddClusterScopedLifecycle holds details about calls to the AddClusterScopedLifecycle method.
		AddClusterScopedLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v3.ExampleLifecycle
		}
		// AddFeatureHandler holds details about calls to the AddFeatureHandler method.
		AddFeatureHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v3.ExampleHandlerFunc
		}
		// AddFeatureLifecycle holds details about calls to the AddFeatureLifecycle method.
		AddFeatureLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v3.ExampleLifecycle
		}
		// AddHandler holds details about calls to the AddHandler method.
		AddHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v3.ExampleHandlerFunc
		}
		// AddLifecycle holds details about calls to the AddLifecycle method.
		AddLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v3.ExampleLifecycle
		}
		// Controller holds details about calls to the Controller method.
		Controller []struct {
		}
		// Create holds details about calls to the Create method.
		Create []struct {
			// In1 is the in1 argument value.
			In1 *v3.Example
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1.DeleteOptions
		}
		// DeleteCollection holds details about calls to the DeleteCollection method.
		DeleteCollection []struct {
			// DeleteOpts is the deleteOpts argument value.
			DeleteOpts *v1.DeleteOptions
			// ListOpts is the listOpts argument value.
			ListOpts v1.ListOptions
		}
		// DeleteNamespaced holds details about calls to the DeleteNamespaced method.
		DeleteNamespaced []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1.DeleteOptions
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Name is the name argument value.
			Name string
			// Opts is the opts argument value.
			Opts v1.GetOptions
		}
		// GetNamespaced holds details about calls to the GetNamespaced method.
		GetNamespaced []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Opts is the opts argument value.
			Opts v1.GetOptions
		}
		// List holds details about calls to the List method.
		List []struct {
			// Opts is the opts argument value.
			Opts v1.ListOptions
		}
		// ObjectClient holds details about calls to the ObjectClient method.
		ObjectClient []struct {
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// In1 is the in1 argument value.
			In1 *v3.Example
		}
		// Watch holds details about calls to the Watch method.
		Watch []struct {
			// Opts is the opts argument value.
			Opts v1.ListOptions
		}
	}
}

// AddClusterScopedFeatureHandler calls AddClusterScopedFeatureHandlerFunc.
func (mock *ExampleInterfaceMock) AddClusterScopedFeatureHandler(ctx context.Context, enabled func() bool, name string, clusterName string, sync v3.ExampleHandlerFunc) {
	if mock.AddClusterScopedFeatureHandlerFunc == nil {
		panic("ExampleInterfaceMock.AddClusterScopedFeatureHandlerFunc: method is nil but ExampleInterface.AddClusterScopedFeatureHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Enabled     func() bool
		Name        string
		ClusterName string
		Sync        v3.ExampleHandlerFunc
	}{
		Ctx:         ctx,
		Enabled:     enabled,
		Name:        name,
		ClusterName: clusterName,
		Sync:        sync,
	}
	lockExampleInterfaceMockAddClusterScopedFeatureHandler.Lock()
	mock.calls.AddClusterScopedFeatureHandler = append(mock.calls.AddClusterScopedFeatureHandler, callInfo)
	lockExampleInterfaceMockAddClusterScopedFeatureHandler.Unlock()
	mock.AddClusterScopedFeatureHandlerFunc(ctx, enabled, name, clusterName, sync)
}

// AddClusterScopedFeatureHandlerCalls gets all the calls that were made to AddClusterScopedFeatureHandler.
// Check the length with:
//     len(mockedExampleInterface.AddClusterScopedFeatureHandlerCalls())
func (mock *ExampleInterfaceMock) AddClusterScopedFeatureHandlerCalls() []struct {
	Ctx         context.Context
	Enabled     func() bool
	Name        string
	ClusterName string
	Sync        v3.ExampleHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Enabled     func() bool
		Name        string
		ClusterName string
		Sync        v3.ExampleHandlerFunc
	}
	lockExampleInterfaceMockAddClusterScopedFeatureHandler.RLock()
	calls = mock.calls.AddClusterScopedFeatureHandler
	lockExampleInterfaceMockAddClusterScopedFeatureHandler.RUnlock()
	return calls
}

// AddClusterScopedFeatureLifecycle calls AddClusterScopedFeatureLifecycleFunc.
func (mock *ExampleInterfaceMock) AddClusterScopedFeatureLifecycle(ctx context.Context, enabled func() bool, name string, clusterName string, lifecycle v3.ExampleLifecycle) {
	if mock.AddClusterScopedFeatureLifecycleFunc == nil {
		panic("ExampleInterfaceMock.AddClusterScopedFeatureLifecycleFunc: method is nil but ExampleInterface.AddClusterScopedFeatureLifecycle was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Enabled     func() bool
		Name        string
		ClusterName string
		Lifecycle   v3.ExampleLifecycle
	}{
		Ctx:         ctx,
		Enabled:     enabled,
		Name:        name,
		ClusterName: clusterName,
		Lifecycle:   lifecycle,
	}
	lockExampleInterfaceMockAddClusterScopedFeatureLifecycle.Lock()
	mock.calls.AddClusterScopedFeatureLifecycle = append(mock.calls.AddClusterScopedFeatureLifecycle, callInfo)
	lockExampleInterfaceMockAddClusterScopedFeatureLifecycle.Unlock()
	mock.AddClusterScopedFeatureLifecycleFunc(ctx, enabled, name, clusterName, lifecycle)
}

// AddClusterScopedFeatureLifecycleCalls gets all the calls that were made to AddClusterScopedFeatureLifecycle.
// Check the length with:
//     len(mockedExampleInterface.AddClusterScopedFeatureLifecycleCalls())
func (mock *ExampleInterfaceMock) AddClusterScopedFeatureLifecycleCalls() []struct {
	Ctx         context.Context
	Enabled     func() bool
	Name        string
	ClusterName string
	Lifecycle   v3.ExampleLifecycle
} {
	var calls []struct {
		Ctx         context.Context
		Enabled     func() bool
		Name        string
		ClusterName string
		Lifecycle   v3.ExampleLifecycle
	}
	lockExampleInterfaceMockAddClusterScopedFeatureLifecycle.RLock()
	calls = mock.calls.AddClusterScopedFeatureLifecycle
	lockExampleInterfaceMockAddClusterScopedFeatureLifecycle.RUnlock()
	return calls
}

// AddClusterScopedHandler calls AddClusterScopedHandlerFunc.
func (mock *ExampleInterfaceMock) AddClusterScopedHandler(ctx context.Context, name string, clusterName string, sync v3.ExampleHandlerFunc) {
	if mock.AddClusterScopedHandlerFunc == nil {
		panic("ExampleInterfaceMock.AddClusterScopedHandlerFunc: method is nil but ExampleInterface.AddClusterScopedHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Sync        v3.ExampleHandlerFunc
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Sync:        sync,
	}
	lockExampleInterfaceMockAddClusterScopedHandler.Lock()
	mock.calls.AddClusterScopedHandler = append(mock.calls.AddClusterScopedHandler, callInfo)
	lockExampleInterfaceMockAddClusterScopedHandler.Unlock()
	mock.AddClusterScopedHandlerFunc(ctx, name, clusterName, sync)
}

// AddClusterScopedHandlerCalls gets all the calls that were made to AddClusterScopedHandler.
// Check the length with:
//     len(mockedExampleInterface.AddClusterScopedHandlerCalls())
func (mock *ExampleInterfaceMock) AddClusterScopedHandlerCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Sync        v3.ExampleHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Sync        v3.ExampleHandlerFunc
	}
	lockExampleInterfaceMockAddClusterScopedHandler.RLock()
	calls = mock.calls.AddClusterScopedHandler
	lockExampleInterfaceMockAddClusterScopedHandler.RUnlock()
	return calls
}

// AddClusterScopedLifecycle calls AddClusterScopedLifecycleFunc.
func (mock *ExampleInterfaceMock) AddClusterScopedLifecycle(ctx context.Context, name string, clusterName string, lifecycle v3.ExampleLifecycle) {
	if mock.AddClusterScopedLifecycleFunc == nil {
		panic("ExampleInterfaceMock.AddClusterScopedLifecycleFunc: method is nil but ExampleInterface.AddClusterScopedLifecycle was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Lifecycle   v3.ExampleLifecycle
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Lifecycle:   lifecycle,
	}
	lockExampleInterfaceMockAddClusterScopedLifecycle.Lock()
	mock.calls.AddClusterScopedLifecycle = append(mock.calls.AddClusterScopedLifecycle, callInfo)
	lockExampleInterfaceMockAddClusterScopedLifecycle.Unlock()
	mock.AddClusterScopedLifecycleFunc(ctx, name, clusterName, lifecycle)
}

// AddClusterScopedLifecycleCalls gets all the calls that were made to AddClusterScopedLifecycle.
// Check the length with:
//     len(mockedExampleInterface.AddClusterScopedLifecycleCalls())
func (mock *ExampleInterfaceMock) AddClusterScopedLifecycleCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Lifecycle   v3.ExampleLifecycle
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Lifecycle   v3.ExampleLifecycle
	}
	lockExampleInterfaceMockAddClusterScopedLifecycle.RLock()
	calls = mock.calls.AddClusterScopedLifecycle
	lockExampleInterfaceMockAddClusterScopedLifecycle.RUnlock()
	return calls
}

// AddFeatureHandler calls AddFeatureHandlerFunc.
func (mock *ExampleInterfaceMock) AddFeatureHandler(ctx context.Context, enabled func() bool, name string, sync v3.ExampleHandlerFunc) {
	if mock.AddFeatureHandlerFunc == nil {
		panic("ExampleInterfaceMock.AddFeatureHandlerFunc: method is nil but ExampleInterface.AddFeatureHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Enabled func() bool
		Name    string
		Sync    v3.ExampleHandlerFunc
	}{
		Ctx:     ctx,
		Enabled: enabled,
		Name:    name,
		Sync:    sync,
	}
	lockExampleInterfaceMockAddFeatureHandler.Lock()
	mock.calls.AddFeatureHandler = append(mock.calls.AddFeatureHandler, callInfo)
	lockExampleInterfaceMockAddFeatureHandler.Unlock()
	mock.AddFeatureHandlerFunc(ctx, enabled, name, sync)
}

// AddFeatureHandlerCalls gets all the calls that were made to AddFeatureHandler.
// Check the length with:
//     len(mockedExampleInterface.AddFeatureHandlerCalls())
func (mock *ExampleInterfaceMock) AddFeatureHandlerCalls() []struct {
	Ctx     context.Context
	Enabled func() bool
	Name    string
	Sync    v3.ExampleHandlerFunc
} {
	var calls []struct {
		Ctx     context.Context
		Enabled func() bool
		Name    string
		Sync    v3.ExampleHandlerFunc
	}
	lockExampleInterfaceMockAddFeatureHandler.RLock()
	calls = mock.calls.AddFeatureHandler
	lockExampleInterfaceMockAddFeatureHandler.RUnlock()
	return calls
}

// AddFeatureLifecycle calls AddFeatureLifecycleFunc.
func (mock *ExampleInterfaceMock) AddFeatureLifecycle(ctx context.Context, enabled func() bool, name string, lifecycle v3.ExampleLifecycle) {
	if mock.AddFeatureLifecycleFunc == nil {
		panic("ExampleInterfaceMock.AddFeatureLifecycleFunc: method is nil but ExampleInterface.AddFeatureLifecycle was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Enabled   func() bool
		Name      string
		Lifecycle v3.ExampleLifecycle
	}{
		Ctx:       ctx,
		Enabled:   enabled,
		Name:      name,
		Lifecycle: lifecycle,
	}
	lockExampleInterfaceMockAddFeatureLifecycle.Lock()
	mock.calls.AddFeatureLifecycle = append(mock.calls.AddFeatureLifecycle, callInfo)
	lockExampleInterfaceMockAddFeatureLifecycle.Unlock()
	mock.AddFeatureLifecycleFunc(ctx, enabled, name, lifecycle)
}

// AddFeatureLifecycleCalls gets all the calls that were made to AddFeatureLifecycle.
// Check the length with:
//     len(mockedExampleInterface.AddFeatureLifecycleCalls())
func (mock *ExampleInterfaceMock) AddFeatureLifecycleCalls() []struct {
	Ctx       context.Context
	Enabled   func() bool
	Name      string
	Lifecycle v3.ExampleLifecycle
} {
	var calls []struct {
		Ctx       context.Context
		Enabled   func() bool
		Name      string
		Lifecycle v3.ExampleLifecycle
	}
	lockExampleInterfaceMockAddFeatureLifecycle.RLock()
	calls = mock.calls.AddFeatureLifecycle
	lockExampleInterfaceMockAddFeatureLifecycle.RUnlock()
	return calls
}

// AddHandler calls AddHandlerFunc.
func (mock *ExampleInterfaceMock) AddHandler(ctx context.Context, name string, sync v3.ExampleHandlerFunc) {
	if mock.AddHandlerFunc == nil {
		panic("ExampleInterfaceMock.AddHandlerFunc: method is nil but ExampleInterface.AddHandler was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
		Sync v3.ExampleHandlerFunc
	}{
		Ctx:  ctx,
		Name: name,
		Sync: sync,
	}
	lockExampleInterfaceMockAddHandler.Lock()
	mock.calls.AddHandler = append(mock.calls.AddHandler, callInfo)
	lockExampleInterfaceMockAddHandler.Unlock()
	mock.AddHandlerFunc(ctx, name, sync)
}

// AddHandlerCalls gets all the calls that were made to AddHandler.
// Check the length with:
//     len(mockedExampleInterface.AddHandlerCalls())
func (mock *ExampleInterfaceMock) AddHandlerCalls() []struct {
	Ctx  context.Context
	Name string
	Sync v3.ExampleHandlerFunc
} {
	var calls []struct {
		Ctx  context.Context
		Name string
		Sync v3.ExampleHandlerFunc
	}
	lockExampleInterfaceMockAddHandler.RLock()
	calls = mock.calls.AddHandler
	lockExampleInterfaceMockAddHandler.RUnlock()
	return calls
}

// AddLifecycle calls AddLifecycleFunc.
func (mock *ExampleInterfaceMock) AddLifecycle(ctx context.Context, name string, lifecycle v3.ExampleLifecycle) {
	if mock.AddLifecycleFunc == nil {
		panic("ExampleInterfaceMock.AddLifecycleFunc: method is nil but ExampleInterface.AddLifecycle was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Name      string
		Lifecycle v3.ExampleLifecycle
	}{
		Ctx:       ctx,
		Name:      name,
		Lifecycle: lifecycle,
	}
	lockExampleInterfaceMockAddLifecycle.Lock()
	mock.calls.AddLifecycle = append(mock.calls.AddLifecycle, callInfo)
	lockExampleInterfaceMockAddLifecycle.Unlock()
	mock.AddLifecycleFunc(ctx, name, lifecycle)
}

// AddLifecycleCalls gets all the calls that were made to AddLifecycle.
// Check the length with:
//     len(mockedExampleInterface.AddLifecycleCalls())
func (mock *ExampleInterfaceMock) AddLifecycleCalls() []struct {
	Ctx       context.Context
	Name      string
	Lifecycle v3.ExampleLifecycle
} {
	var calls []struct {
		Ctx       context.Context
		Name      string
		Lifecycle v3.ExampleLifecycle
	}
	lockExampleInterfaceMockAddLifecycle.RLock()
	calls = mock.calls.AddLifecycle
	lockExampleInterfaceMockAddLifecycle.RUnlock()
	return calls
}

// Controller calls ControllerFunc.
func (mock *ExampleInterfaceMock) Controller() v3.ExampleController {
	if mock.ControllerFunc == nil {
		panic("ExampleInterfaceMock.ControllerFunc: method is nil but ExampleInterface.Controller was just called")
	}
	callInfo := struct {
	}{}
	lockExampleInterfaceMockController.Lock()
	mock.calls.Controller = append(mock.calls.Controller, callInfo)
	lockExampleInterfaceMockController.Unlock()
	return mock.ControllerFunc()
}

// ControllerCalls gets all the calls that were made to Controller.
// Check the length with:
//     len(mockedExampleInterface.ControllerCalls())
func (mock *ExampleInterfaceMock) ControllerCalls() []struct {
} {
	var calls []struct {
	}
	lockExampleInterfaceMockController.RLock()
	calls = mock.calls.Controller
	lockExampleInterfaceMockController.RUnlock()
	return calls
}

// Create calls CreateFunc.
func (mock *ExampleInterfaceMock) Create(in1 *v3.Example) (*v3.Example, error) {
	if mock.CreateFunc == nil {
		panic("ExampleInterfaceMock.CreateFunc: method is nil but ExampleInterface.Create was just called")
	}
	callInfo := struct {
		In1 *v3.Example
	}{
		In1: in1,
	}
	lockExampleInterfaceMockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	lockExampleInterfaceMockCreate.Unlock()
	return mock.CreateFunc(in1)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedExampleInterface.CreateCalls())
func (mock *ExampleInterfaceMock) CreateCalls() []struct {
	In1 *v3.Example
} {
	var calls []struct {
		In1 *v3.Example
	}
	lockExampleInterfaceMockCreate.RLock()
	calls = mock.calls.Create
	lockExampleInterfaceMockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *ExampleInterfaceMock) Delete(name string, options *v1.DeleteOptions) error {
	if mock.DeleteFunc == nil {
		panic("ExampleInterfaceMock.DeleteFunc: method is nil but ExampleInterface.Delete was just called")
	}
	callInfo := struct {
		Name    string
		Options *v1.DeleteOptions
	}{
		Name:    name,
		Options: options,
	}
	lockExampleInterfaceMockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	lockExampleInterfaceMockDelete.Unlock()
	return mock.DeleteFunc(name, options)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedExampleInterface.DeleteCalls())
func (mock *ExampleInterfaceMock) DeleteCalls() []struct {
	Name    string
	Options *v1.DeleteOptions
} {
	var calls []struct {
		Name    string
		Options *v1.DeleteOptions
	}
	lockExampleInterfaceMockDelete.RLock()
	calls = mock.calls.Delete
	lockExampleInterfaceMockDelete.RUnlock()
	return calls
}

// DeleteCollection calls DeleteCollectionFunc.
func (mock *ExampleInterfaceMock) DeleteCollection(deleteOpts *v1.DeleteOptions, listOpts v1.ListOptions) error {
	if mock.DeleteCollectionFunc == nil {
		panic("ExampleInterfaceMock.DeleteCollectionFunc: method is nil but ExampleInterface.DeleteCollection was just called")
	}
	callInfo := struct {
		DeleteOpts *v1.DeleteOptions
		ListOpts   v1.ListOptions
	}{
		DeleteOpts: deleteOpts,
		ListOpts:   listOpts,
	}
	lockExampleInterfaceMockDeleteCollection.Lock()
	mock.calls.DeleteCollection = append(mock.calls.DeleteCollection, callInfo)
	lockExampleInterfaceMockDeleteCollection.Unlock()
	return mock.DeleteCollectionFunc(deleteOpts, listOpts)
}

// DeleteCollectionCalls gets all the calls that were made to DeleteCollection.
// Check the length with:
//     len(mockedExampleInterface.DeleteCollectionCalls())
func (mock *ExampleInterfaceMock) DeleteCollectionCalls() []struct {
	DeleteOpts *v1.DeleteOptions
	ListOpts   v1.ListOptions
} {
	var calls []struct {
		DeleteOpts *v1.DeleteOptions
		ListOpts   v1.ListOptions
	}
	lockExampleInterfaceMockDeleteCollection.RLock()
	calls = mock.calls.DeleteCollection
	lockExampleInterfaceMockDeleteCollection.RUnlock()
	return calls
}

// DeleteNamespaced calls DeleteNamespacedFunc.
func (mock *ExampleInterfaceMock) DeleteNamespaced(namespace string, name string, options *v1.DeleteOptions) error {
	if mock.DeleteNamespacedFunc == nil {
		panic("ExampleInterfaceMock.DeleteNamespacedFunc: method is nil but ExampleInterface.DeleteNamespaced was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Options   *v1.DeleteOptions
	}{
		Namespace: namespace,
		Name:      name,
		Options:   options,
	}
	lockExampleInterfaceMockDeleteNamespaced.Lock()
	mock.calls.DeleteNamespaced = append(mock.calls.DeleteNamespaced, callInfo)
	lockExampleInterfaceMockDeleteNamespaced.Unlock()
	return mock.DeleteNamespacedFunc(namespace, name, options)
}

// DeleteNamespacedCalls gets all the calls that were made to DeleteNamespaced.
// Check the length with:
//     len(mockedExampleInterface.DeleteNamespacedCalls())
func (mock *ExampleInterfaceMock) DeleteNamespacedCalls() []struct {
	Namespace string
	Name      string
	Options   *v1.DeleteOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Options   *v1.DeleteOptions
	}
	lockExampleInterfaceMockDeleteNamespaced.RLock()
	calls = mock.calls.DeleteNamespaced
	lockExampleInterfaceMockDeleteNamespaced.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *ExampleInterfaceMock) Get(name string, opts v1.GetOptions) (*v3.Example, error) {
	if mock.GetFunc == nil {
		panic("ExampleInterfaceMock.GetFunc: method is nil but ExampleInterface.Get was just called")
	}
	callInfo := struct {
		Name string
		Opts v1.GetOptions
	}{
		Name: name,
		Opts: opts,
	}
	lockExampleInterfaceMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockExampleInterfaceMockGet.Unlock()
	return mock.GetFunc(name, opts)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedExampleInterface.GetCalls())
func (mock *ExampleInterfaceMock) GetCalls() []struct {
	Name string
	Opts v1.GetOptions
} {
	var calls []struct {
		Name string
		Opts v1.GetOptions
	}
	lockExampleInterfaceMockGet.RLock()
	calls = mock.calls.Get
	lockExampleInterfaceMockGet.RUnlock()
	return calls
}

// GetNamespaced calls GetNamespacedFunc.
func (mock *ExampleInterfaceMock) GetNamespaced(namespace string, name string, opts v1.GetOptions) (*v3.Example, error) {
	if mock.GetNamespacedFunc == nil {
		panic("ExampleInterfaceMock.GetNamespacedFunc: method is nil but ExampleInterface.GetNamespaced was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Opts      v1.GetOptions
	}{
		Namespace: namespace,
		Name:      name,
		Opts:      opts,
	}
	lockExampleInterfaceMockGetNamespaced.Lock()
	mock.calls.GetNamespaced = append(mock.calls.GetNamespaced, callInfo)
	lockExampleInterfaceMockGetNamespaced.Unlock()
	return mock.GetNamespacedFunc(namespace, name, opts)
}

// GetNamespacedCalls gets all the calls that were made to GetNamespaced.
// Check the length with:
//     len(mockedExampleInterface.GetNamespacedCalls())
func (mock *ExampleInterfaceMock) GetNamespacedCalls() []struct {
	Namespace string
	Name      string
	Opts      v1.GetOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Opts      v1.GetOptions
	}
	lockExampleInterfaceMockGetNamespaced.RLock()
	calls = mock.calls.GetNamespaced
	lockExampleInterfaceMockGetNamespaced.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *ExampleInterfaceMock) List(opts v1.ListOptions) (*v3.ExampleList, error) {
	if mock.ListFunc == nil {
		panic("ExampleInterfaceMock.ListFunc: method is nil but ExampleInterface.List was just called")
	}
	callInfo := struct {
		Opts v1.ListOptions
	}{
		Opts: opts,
	}
	lockExampleInterfaceMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockExampleInterfaceMockList.Unlock()
	return mock.ListFunc(opts)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedExampleInterface.ListCalls())
func (mock *ExampleInterfaceMock) ListCalls() []struct {
	Opts v1.ListOptions
} {
	var calls []struct {
		Opts v1.ListOptions
	}
	lockExampleInterfaceMockList.RLock()
	calls = mock.calls.List
	lockExampleInterfaceMockList.RUnlock()
	return calls
}

// ObjectClient calls ObjectClientFunc.
func (mock *ExampleInterfaceMock) ObjectClient() *objectclient.ObjectClient {
	if mock.ObjectClientFunc == nil {
		panic("ExampleInterfaceMock.ObjectClientFunc: method is nil but ExampleInterface.ObjectClient was just called")
	}
	callInfo := struct {
	}{}
	lockExampleInterfaceMockObjectClient.Lock()
	mock.calls.ObjectClient = append(mock.calls.ObjectClient, callInfo)
	lockExampleInterfaceMockObjectClient.Unlock()
	return mock.ObjectClientFunc()
}

// ObjectClientCalls gets all the calls that were made to ObjectClient.
// Check the length with:
//     len(mockedExampleInterface.ObjectClientCalls())
func (mock *ExampleInterfaceMock) ObjectClientCalls() []struct {
} {
	var calls []struct {
	}
	lockExampleInterfaceMockObjectClient.RLock()
	calls = mock.calls.ObjectClient
	lockExampleInterfaceMockObjectClient.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *ExampleInterfaceMock) Update(in1 *v3.Example) (*v3.Example, error) {
	if mock.UpdateFunc == nil {
		panic("ExampleInterfaceMock.UpdateFunc: method is nil but ExampleInterface.Update was just called")
	}
	callInfo := struct {
		In1 *v3.Example
	}{
		In1: in1,
	}
	lockExampleInterfaceMockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	lockExampleInterfaceMockUpdate.Unlock()
	return mock.UpdateFunc(in1)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedExampleInterface.UpdateCalls())
func (mock *ExampleInterfaceMock) UpdateCalls() []struct {
	In1 *v3.Example
} {
	var calls []struct {
		In1 *v3.Example
	}
	lockExampleInterfaceMockUpdate.RLock()
	calls = mock.calls.Update
	lockExampleInterfaceMockUpdate.RUnlock()
	return calls
}

// Watch calls WatchFunc.
func (mock *ExampleInterfaceMock) Watch(opts v1.ListOptions) (watch.Interface, error) {
	if mock.WatchFunc == nil {
		panic("ExampleInterfaceMock.WatchFunc: method is nil but ExampleInterface.Watch was just called")
	}
	callInfo := struct {
		Opts v1.ListOptions
	}{
		Opts: opts,
	}
	lockExampleInterfaceMockWatch.Lock()
	mock.calls.Watch = append(mock.calls.Watch, callInfo)
	lockExampleInterfaceMockWatch.Unlock()
	return mock.WatchFunc(opts)
}

// WatchCalls gets all the calls that were made to Watch.
// Check the length with:
//     len(mockedExampleInterface.WatchCalls())
func (mock *ExampleInterfaceMock) WatchCalls() []struct {
	Opts v1.ListOptions
} {
	var calls []struct {
		Opts v1.ListOptions
	}
	lockExampleInterfaceMockWatch.RLock()
	calls = mock.calls.Watch
	lockExampleInterfaceMockWatch.RUnlock()
	return calls
}

var (
	lockExamplesGetterMockExamples sync.RWMutex
)

// Ensure, that ExamplesGetterMock does implement ExamplesGetter.
// If this is not the case, regenerate this file with moq.
var _ v3.ExamplesGetter = &ExamplesGetterMock{}

// ExamplesGetterMock is a mock implementation of ExamplesGetter.
//
//     func TestSomethingThatUsesExamplesGetter(t *testing.T) {
//
//         // make and configure a mocked ExamplesGetter
//         mockedExamplesGetter := &ExamplesGetterMock{
//             ExamplesFunc: func(namespace string) v3.ExampleInterface {
// 	               panic("mock out the Examples method")
//             },
//         }
//
//         // use mockedExamplesGetter in code that requires ExamplesGetter
//         // and then make assertions.
//
//     }
type ExamplesGetterMock struct {
	// ExamplesFunc mocks the Examples method.
	ExamplesFunc func(namespace string) v3.ExampleInterface

	// calls tracks calls to the methods.
	calls struct {
		// Examples holds details about calls to the Examples method.
		Examples []struct {
			// Namespace is the namespace argument value.
			Namespace string
		}
	}
}

// Examples calls ExamplesFunc.
func (mock *ExamplesGetterMock) Examples(namespace string) v3.ExampleInterface {
	if mock.ExamplesFunc == nil {
		panic("ExamplesGetterMock.ExamplesFunc: method is nil but ExamplesGetter.Examples was just called")
	}
	callInfo := struct {
		Namespace string
	}{
		Namespace: namespace,
	}
	lockExamplesGetterMockExamples.Lock()
	mock.calls.Examples = append(mock.calls.Examples, callInfo)
	lockExamplesGetterMockExamples.Unlock()
	return mock.ExamplesFunc(namespace)
}

// ExamplesCalls gets all the calls that were made to Examples.
// Check the length with:
//     len(mockedExamplesGetter.ExamplesCalls())
func (mock *ExamplesGetterMock) ExamplesCalls() []struct {
	Namespace string
} {
	var calls []struct {
		Namespace string
	}
	lockExamplesGetterMockExamples.RLock()
	calls = mock.calls.Examples
	lockExamplesGetterMockExamples.RUnlock()
	return calls
}
